package com.nowui.cloud.${moduleName}.${packageName}.controller.admin;
import com.nowui.cloud.controller.BaseController;
import com.nowui.cloud.util.Util;
import com.nowui.cloud.${moduleName}.${packageName}.entity.${firstUpperWithoutUnderlineEntityName};
import com.nowui.cloud.${moduleName}.${packageName}.service.${firstUpperWithoutUnderlineEntityName}Service;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

/**
 * ${tableComment}管理端控制器
 *
 * @author ${author}
 *
 * ${date}
 */
@Api(value = "${tableComment}", description = "${tableComment}管理端接口管理")
@RestController
public class ${firstUpperWithoutUnderlineEntityName}AdminController extends BaseController {

    @Autowired
    private ${firstUpperWithoutUnderlineEntityName}Service ${firstLowerWithoutUnderlineEntityName}Service;

    @ApiOperation(value = "${tableComment}列表")
    @RequestMapping(value = "/${urlEntityName}/admin/v1/list", method = {RequestMethod.POST}, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public Map<String, Object> listV1(@RequestBody ${firstUpperWithoutUnderlineEntityName} body) {
        validateRequest(
                body,
                ${firstUpperWithoutUnderlineEntityName}.APP_ID,
                <%for(column in searchColumnList){%>
                ${firstUpperWithoutUnderlineEntityName}.${column.upperWithUnderlineColumnName},
                <%}%>
                ${firstUpperWithoutUnderlineEntityName}.PAGE_INDEX,
                ${firstUpperWithoutUnderlineEntityName}.PAGE_SIZE
        );

        Integer resultTotal = ${firstLowerWithoutUnderlineEntityName}Service.countForAdmin(body.getAppId() <%for(column in searchColumnList){%>, body.get${column.firstUpperColumnName}()<%}%>);
        List<${firstUpperWithoutUnderlineEntityName}> resultList = ${firstLowerWithoutUnderlineEntityName}Service.listForAdmin(body.getAppId()<%for(column in searchColumnList){%>, body.get${column.firstUpperColumnName}()<%}%>, body.getPageIndex(), body.getPageSize());

        validateResponse(
                ${firstUpperWithoutUnderlineEntityName}.${upperWithUnderlineTableId},
                <%for(column in listColumnList){%>
                ${firstUpperWithoutUnderlineEntityName}.${column.upperWithUnderlineColumnName}<%if(!columnLP.last){%>,<%}%>
                <%}%>
        );

        return renderJson(resultTotal, resultList);
    }

    @ApiOperation(value = "${tableComment}信息")
    @RequestMapping(value = "/${urlEntityName}/admin/v1/find", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public Map<String, Object> findV1(@RequestBody ${firstUpperWithoutUnderlineEntityName} body) {
        validateRequest(
                body,
                ${firstUpperWithoutUnderlineEntityName}.APP_ID,
                ${firstUpperWithoutUnderlineEntityName}.${upperWithUnderlineTableId}
        );

        ${firstUpperWithoutUnderlineEntityName} result = ${firstLowerWithoutUnderlineEntityName}Service.find(body.get${firstUpperTableId}());

        validateResponse(
                ${firstUpperWithoutUnderlineEntityName}.${upperWithUnderlineTableId},
                <%for(column in detailColumnList){%>
                ${firstUpperWithoutUnderlineEntityName}.${column.upperWithUnderlineColumnName}<%if(!columnLP.last){%>,<%}%>
                <%}%>
        );

        return renderJson(result);
    }

    @ApiOperation(value = "新增${tableComment}")
    @RequestMapping(value = "/${urlEntityName}/admin/v1/save", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public Map<String, Object> saveV1(@RequestBody ${firstUpperWithoutUnderlineEntityName} body) {
        validateRequest(
                body,
                ${firstUpperWithoutUnderlineEntityName}.APP_ID,
                <%for(column in detailColumnList){%>
                ${firstUpperWithoutUnderlineEntityName}.${column.upperWithUnderlineColumnName}<%if(!columnLP.last){%>,<%}%>
                <%}%>
        );

        Boolean result = ${firstLowerWithoutUnderlineEntityName}Service.save(body, Util.getRandomUUID(), body.getSystemRequestUserId());

        return renderJson(result);
    }

    @ApiOperation(value = "修改${tableComment}")
    @RequestMapping(value = "/${urlEntityName}/admin/v1/update", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public Map<String, Object> updateV1(@RequestBody ${firstUpperWithoutUnderlineEntityName} body) {
        validateRequest(
                body,
                ${firstUpperWithoutUnderlineEntityName}.${upperWithUnderlineTableId},
                ${firstUpperWithoutUnderlineEntityName}.APP_ID,
                <%for(column in detailColumnList){%>
                ${firstUpperWithoutUnderlineEntityName}.${column.upperWithUnderlineColumnName},
                <%}%>
                ${firstUpperWithoutUnderlineEntityName}.SYSTEM_VERSION
        );

        Boolean result = ${firstLowerWithoutUnderlineEntityName}Service.update(body, body.get${firstUpperTableId}(), body.getSystemRequestUserId(), body.getSystemVersion());

        return renderJson(result);
    }

    @ApiOperation(value = "删除${tableComment}")
    @RequestMapping(value = "/${urlEntityName}/admin/v1/delete", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public Map<String, Object> deleteV1(@RequestBody ${firstUpperWithoutUnderlineEntityName} body) {
        validateRequest(
                body,
                ${firstUpperWithoutUnderlineEntityName}.${upperWithUnderlineTableId},
                ${firstUpperWithoutUnderlineEntityName}.APP_ID,
                ${firstUpperWithoutUnderlineEntityName}.SYSTEM_VERSION
        );

        Boolean result = ${firstLowerWithoutUnderlineEntityName}Service.delete(body.get${firstUpperTableId}(), body.getSystemRequestUserId(), body.getSystemVersion());

        return renderJson(result);
    }

}
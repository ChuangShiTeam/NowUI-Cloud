package com.nowui.cloud.${moduleName}.${packageName}.controller.admin;

import com.alibaba.fastjson.JSON;
import com.nowui.cloud.controller.BaseController;
import com.nowui.cloud.util.Util;
import com.nowui.cloud.${moduleName}.${packageName}.entity.${firstUpperWithoutUnderlineEntityName};
import com.nowui.cloud.${moduleName}.${packageName}.view.${firstUpperWithoutUnderlineEntityName}View;
import com.nowui.cloud.${moduleName}.${packageName}.service.${firstUpperWithoutUnderlineEntityName}Service;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

/**
 * ${tableComment}管理端控制器
 *
 * @author ${author}
 *
 * ${date}
 */
@Api(value = "${tableComment}", description = "${tableComment}管理端接口管理")
@RestController
public class ${firstUpperWithoutUnderlineEntityName}AdminController extends BaseController {

    @Autowired
    private ${firstUpperWithoutUnderlineEntityName}Service ${firstLowerWithoutUnderlineEntityName}Service;

    @ApiOperation(value = "${tableComment}列表")
    @RequestMapping(value = "/${urlEntityName}/admin/v1/list", method = {RequestMethod.POST}, produces = MediaType.APPLICATION_JSON_VALUE)
    public Map<String, Object> listV1() {
        ${firstUpperWithoutUnderlineEntityName}View ${firstLowerWithoutUnderlineEntityName}EntityView = getEntry(${firstUpperWithoutUnderlineEntityName}View.class);

        validateRequest(
                ${firstLowerWithoutUnderlineEntityName}EntityView,
                ${firstUpperWithoutUnderlineEntityName}View.APP_ID,
                <%for(column in searchColumnList){%>
                ${firstUpperWithoutUnderlineEntityName}View.${column.upperWithUnderlineColumnName},
                <%}%>
                ${firstUpperWithoutUnderlineEntityName}View.PAGE_INDEX,
                ${firstUpperWithoutUnderlineEntityName}View.PAGE_SIZE
        );

        Integer resultTotal = ${firstLowerWithoutUnderlineEntityName}Service.countForAdmin(${firstLowerWithoutUnderlineEntityName}View.getAppId()<%for(column in searchColumnList){%>, ${firstLowerWithoutUnderlineEntityName}EntityView.get${column.firstUpperColumnName}()<%}%>);
        List<${firstUpperWithoutUnderlineEntityName}View> resultList = ${firstLowerWithoutUnderlineEntityName}Service.listForAdmin(${firstLowerWithoutUnderlineEntityName}EntityView.getAppId()<%for(column in searchColumnList){%>, ${firstLowerWithoutUnderlineEntityName}EntityView.get${column.firstUpperColumnName}()<%}%>, ${firstLowerWithoutUnderlineEntityName}EntityView.getPageIndex(), ${firstLowerWithoutUnderlineEntityName}EntityView.getPageSize());

        validateResponse(
                ${firstUpperWithoutUnderlineEntityName}View.${upperWithUnderlineTableId},
                <%for(column in listColumnList){%>
                ${firstUpperWithoutUnderlineEntityName}View.${column.upperWithUnderlineColumnName}<%if(!columnLP.last){%>,<%}%>
                <%}%>
        );

        return renderJson(resultTotal, resultList);
    }

    @ApiOperation(value = "${tableComment}信息")
    @RequestMapping(value = "/${urlEntityName}/admin/v1/find", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public Map<String, Object> findV1() {
        ${firstUpperWithoutUnderlineEntityName}View ${firstLowerWithoutUnderlineEntityName}EntityView = getEntry(${firstUpperWithoutUnderlineEntityName}View.class);

        validateRequest(
                ${firstLowerWithoutUnderlineEntityName}EntityView,
                ${firstUpperWithoutUnderlineEntityName}View.APP_ID,
                ${firstUpperWithoutUnderlineEntityName}View.${upperWithUnderlineTableId}
        );

        ${firstUpperWithoutUnderlineEntityName}View result = ${firstLowerWithoutUnderlineEntityName}Service.find(${firstLowerWithoutUnderlineEntityName}EntityView.get${firstUpperTableId}());

        validateResponse(
                ${firstUpperWithoutUnderlineEntityName}View.${upperWithUnderlineTableId},
                <%for(column in detailColumnList){%>
            	${firstUpperWithoutUnderlineEntityName}View.${column.upperWithUnderlineColumnName},
                <%}%>
                ${firstUpperWithoutUnderlineEntityName}View.SYSTEM_VERSION
        );

        return renderJson(result);
    }

    @ApiOperation(value = "${tableComment}新增")
    @RequestMapping(value = "/${urlEntityName}/admin/v1/save", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public Map<String, Object> saveV1() {
        ${firstUpperWithoutUnderlineEntityName} ${firstLowerWithoutUnderlineEntityName}EntityView = getEntry(${firstUpperWithoutUnderlineEntityName}.class);

        validateRequest(
                ${firstLowerWithoutUnderlineEntityName}Entity,
                ${firstUpperWithoutUnderlineEntityName}View.APP_ID,
                <%for(column in detailColumnList){%>
                ${firstUpperWithoutUnderlineEntityName}View.${column.upperWithUnderlineColumnName}<%if(!columnLP.last){%>,<%}%>
                <%}%>
        );

        String ${firstLowerWithoutUnderlineEntityName}Id = Util.getRandomUUID();

        ${firstUpperWithoutUnderlineEntityName} ${firstLowerWithoutUnderlineEntityName} = getEntry(${firstUpperWithoutUnderlineEntityName}.class);

        ${firstUpperWithoutUnderlineEntityName} result = ${firstLowerWithoutUnderlineEntityName}Service.save(${firstLowerWithoutUnderlineEntityName}, ${firstLowerWithoutUnderlineEntityName}Id, ${firstLowerWithoutUnderlineEntityName}.getSystemRequestUserId());

        Boolean success = false;

        if (result != null) {
            ${firstUpperWithoutUnderlineEntityName}View ${firstLowerWithoutUnderlineEntityName}View = getEntry(${firstUpperWithoutUnderlineEntityName}View.class);
            ${firstLowerWithoutUnderlineEntityName}View.putEntry(result);

            ${firstLowerWithoutUnderlineEntityName}Service.save(${firstLowerWithoutUnderlineEntityName}View);

            success = true;
        }

        return renderJson(success);
    }

    @ApiOperation(value = "${tableComment}修改")
    @RequestMapping(value = "/${urlEntityName}/admin/v1/update", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public Map<String, Object> updateV1() {
        ${firstUpperWithoutUnderlineEntityName} ${firstLowerWithoutUnderlineEntityName}EntityView = getEntry(${firstUpperWithoutUnderlineEntityName}.class);

        validateRequest(
                ${firstLowerWithoutUnderlineEntityName}EntityView,
                ${firstUpperWithoutUnderlineEntityName}View.${upperWithUnderlineTableId},
                ${firstUpperWithoutUnderlineEntityName}View.APP_ID,
                <%for(column in detailColumnList){%>
                ${firstUpperWithoutUnderlineEntityName}View.${column.upperWithUnderlineColumnName},
                <%}%>
                ${firstUpperWithoutUnderlineEntityName}.SYSTEM_VERSION
        );

        ${firstUpperWithoutUnderlineEntityName} ${firstLowerWithoutUnderlineEntityName} = getEntry(${firstUpperWithoutUnderlineEntityName}.class);

        ${firstUpperWithoutUnderlineEntityName} result = ${firstLowerWithoutUnderlineEntityName}Service.update(${firstLowerWithoutUnderlineEntityName}, ${firstLowerWithoutUnderlineEntityName}.get${firstUpperTableId}(), ${firstLowerWithoutUnderlineEntityName}.getSystemRequestUserId(), ${firstLowerWithoutUnderlineEntityName}.getSystemVersion());

        Boolean success = false;

        if (result != null) {
            ${firstUpperWithoutUnderlineEntityName}View ${firstLowerWithoutUnderlineEntityName}View = getEntry(${firstUpperWithoutUnderlineEntityName}View.class);
            ${firstLowerWithoutUnderlineEntityName}View.putEntry(result);

            ${firstLowerWithoutUnderlineEntityName}Service.update(${firstLowerWithoutUnderlineEntityName}View);

            success = true;
        }

        return renderJson(success);
    }

    @ApiOperation(value = "${tableComment}删除")
    @RequestMapping(value = "/${urlEntityName}/admin/v1/delete", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public Map<String, Object> deleteV1() {
        ${firstUpperWithoutUnderlineEntityName} ${firstLowerWithoutUnderlineEntityName}EntityView = getEntry(${firstUpperWithoutUnderlineEntityName}.class);

        validateRequest(
                ${firstLowerWithoutUnderlineEntityName}EntityView,
                ${firstUpperWithoutUnderlineEntityName}View.${upperWithUnderlineTableId},
                ${firstUpperWithoutUnderlineEntityName}.APP_ID,
                ${firstUpperWithoutUnderlineEntityName}.SYSTEM_VERSION
        );

        ${firstUpperWithoutUnderlineEntityName} result = ${firstLowerWithoutUnderlineEntityName}Service.delete(${firstLowerWithoutUnderlineEntityName}EntityView.get${firstUpperTableId}(), ${firstLowerWithoutUnderlineEntityName}EntityView.getSystemRequestUserId(), ${firstLowerWithoutUnderlineEntityName}EntityView.getSystemVersion());

        Boolean success = false;

        if (result != null) {
            ${firstUpperWithoutUnderlineEntityName}View ${firstLowerWithoutUnderlineEntityName}View = getEntry(${firstUpperWithoutUnderlineEntityName}View.class);
            ${firstLowerWithoutUnderlineEntityName}View.putEntry(result);

            ${firstLowerWithoutUnderlineEntityName}Service.update(${firstLowerWithoutUnderlineEntityName}View);

            success = true;
        }

        return renderJson(success);
    }

    @ApiOperation(value = "${tableComment}数据同步")
    @RequestMapping(value = "/${urlEntityName}/admin/v1/synchronize", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
    public Map<String, Object> synchronizeV1() {
        List<${firstUpperWithoutUnderlineEntityName}> ${firstLowerWithoutUnderlineEntityName}List = ${firstLowerWithoutUnderlineEntityName}Service.listByMysql();

        for (${firstUpperWithoutUnderlineEntityName} ${firstLowerWithoutUnderlineEntityName} : ${firstLowerWithoutUnderlineEntityName}List) {
            ${firstUpperWithoutUnderlineEntityName}View ${firstLowerWithoutUnderlineEntityName}View = new ${firstUpperWithoutUnderlineEntityName}View();
            ${firstLowerWithoutUnderlineEntityName}View.putAll(${firstLowerWithoutUnderlineEntityName});

            ${firstLowerWithoutUnderlineEntityName}Service.saveOrUpdate(${firstLowerWithoutUnderlineEntityName}View);
        }

        return renderJson(true);
    }

}